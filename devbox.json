{
  "packages": [
    "bind@latest",
    "dig@latest", 
    "docker@latest",
    "docker-compose@latest",
    "go@latest",
    "python3@latest",
    "python3-pip@latest",
    "nodejs@latest",
    "npm@latest",
    "curl@latest",
    "jq@latest",
    "yq@latest"
  ],
  "shell": {
    "init_hook": [
      "echo 'Setting up BIND DNS Consumer Development Environment...'",
      "",
      "# Install DNSControl via Homebrew (if on macOS) or Go",
      "if command -v brew >/dev/null 2>&1; then",
      "  echo 'Installing DNSControl via Homebrew...'",
      "  brew install dnscontrol || echo 'DNSControl already installed or installation failed'",
      "else",
      "  echo 'Installing DNSControl via Go...'",
      "  go install github.com/StackExchange/dnscontrol/v4@latest",
      "fi",
      "",
      "# Create Python virtual environment for octoDNS",
      "echo 'Setting up octoDNS Python environment...'",
      "if [ ! -d \"$HOME/.octodns-env\" ]; then",
      "  python3 -m venv $HOME/.octodns-env",
      "  echo 'Created octoDNS virtual environment at ~/.octodns-env'",
      "fi",
      "",
      "# Install octoDNS in virtual environment",
      "echo 'Installing octoDNS...'",
      "source $HOME/.octodns-env/bin/activate",
      "pip install --upgrade pip",
      "pip install octodns[bind] || echo 'octoDNS installation failed or already installed'",
      "deactivate",
      "",
      "# Install external-dns (requires Kubernetes environment)",
      "echo 'Note: external-dns requires a Kubernetes cluster to run'",
      "echo 'You can download external-dns releases from: https://github.com/kubernetes-sigs/external-dns/releases'",
      "",
      "# Verify installations",
      "echo ''",
      "echo '=== Installation Verification ==='",
      "echo 'Checking installed tools...'",
      "",
      "# Check dig and TSIG support",
      "if command -v dig >/dev/null 2>&1; then",
      "  echo 'âœ“ dig installed'",
      "  dig -v 2>&1 | head -1",
      "else",
      "  echo 'âœ— dig not found'",
      "fi",
      "",
      "# Check DNSControl",
      "if command -v dnscontrol >/dev/null 2>&1; then",
      "  echo 'âœ“ DNSControl installed'",
      "  dnscontrol version",
      "else",
      "  echo 'âœ— DNSControl not found'",
      "fi",
      "",
      "# Check octoDNS",
      "if [ -f \"$HOME/.octodns-env/bin/octodns-validate\" ]; then",
      "  echo 'âœ“ octoDNS installed in virtual environment'",
      "  source $HOME/.octodns-env/bin/activate",
      "  octodns-validate --version 2>/dev/null || echo 'octoDNS version check failed'",
      "  deactivate",
      "else",
      "  echo 'âœ— octoDNS not found'",
      "fi",
      "",
      "# Check Docker",
      "if command -v docker >/dev/null 2>&1; then",
      "  echo 'âœ“ Docker installed'",
      "  docker --version",
      "else",
      "  echo 'âœ— Docker not found'",
      "fi",
      "",
      "# Check Docker Compose",
      "if command -v docker-compose >/dev/null 2>&1; then",
      "  echo 'âœ“ Docker Compose installed'",
      "  docker-compose --version",
      "else",
      "  echo 'âœ— Docker Compose not found'",
      "fi",
      "",
      "echo ''",
      "echo '=== Quick Start Commands ==='",
      "echo 'BIND DNS Server:'",
      "echo '  ./env-manager.sh generate-keys    # Generate TSIG keys'",
      "echo '  docker-compose up -d              # Start BIND DNS server'",
      "echo ''",
      "echo 'Testing with dig:'",
      "echo '  dig @localhost example.local      # Test DNS resolution'",
      "echo '  dig @localhost -y hmac-sha256:key-name:key-secret example.local  # Test with TSIG'",
      "echo ''",
      "echo 'DNSControl:'",
      "echo '  dnscontrol check                  # Validate configuration'",
      "echo '  dnscontrol preview               # Preview changes'",
      "echo '  dnscontrol push                  # Apply changes'",
      "echo ''",
      "echo 'octoDNS:'",
      "echo '  source ~/.octodns-env/bin/activate  # Activate Python environment'",
      "echo '  octodns-validate --config-file config.yaml  # Validate configuration'",
      "echo '  octodns-sync --config-file config.yaml --plan  # Plan changes'",
      "echo '  octodns-sync --config-file config.yaml  # Apply changes'",
      "echo ''",
      "echo 'Environment Setup:'",
      "echo '  ./env-manager.sh show-info        # Show current environment'",
      "echo '  ./env-manager.sh validate         # Validate environment files'",
      "echo '  ./env-manager.sh backup           # Backup environment files'",
      "echo ''",
      "echo 'Development environment ready! ðŸš€'"
    ],
    "scripts": {
      "activate-octodns": [
        "source $HOME/.octodns-env/bin/activate",
        "echo 'octoDNS virtual environment activated'"
      ],
      "test-dns": [
        "echo 'Testing DNS resolution...'",
        "dig @localhost example.local A",
        "echo ''",
        "echo 'Testing with TSIG (requires TSIG key):'",
        "echo 'dig @localhost -y hmac-sha256:key-name:key-secret example.local A'"
      ],
      "validate-all": [
        "echo 'Validating all DNS tools...'",
        "echo ''",
        "echo '=== DNSControl Validation ==='",
        "if [ -f dnsconfig.js ]; then",
        "  dnscontrol check",
        "else",
        "  echo 'No dnsconfig.js found - create one to validate DNSControl setup'",
        "fi",
        "echo ''",
        "echo '=== octoDNS Validation ==='",
        "if [ -f config.yaml ]; then",
        "  source $HOME/.octodns-env/bin/activate",
        "  octodns-validate --config-file config.yaml",
        "  deactivate",
        "else",
        "  echo 'No config.yaml found - create one to validate octoDNS setup'",
        "fi",
        "echo ''",
        "echo '=== Environment Validation ==='",
        "if [ -f env-manager.sh ]; then",
        "  ./env-manager.sh validate",
        "else",
        "  echo 'No env-manager.sh found - ensure you have the environment management script'",
        "fi"
      ],
      "setup-examples": [
        "echo 'Setting up example configurations...'",
        "mkdir -p examples/dnscontrol examples/octodns",
        "echo 'Created example directories for DNSControl and octoDNS configurations'",
        "echo 'Refer to the documentation for sample configuration files'"
      ]
    }
  },
  "env": {
    "DNS_SERVER": "localhost",
    "DNS_PORT": "53",
    "PYTHONPATH": "$HOME/.octodns-env/lib/python*/site-packages:$PYTHONPATH"
  }
}
